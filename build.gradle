plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.rmr.dinosaurs'
version = 'SNAPSHOT-1.0'

sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
	mavenLocal()
	mavenCentral()
}

jar {
	enabled = false
}

ext {
	set('testcontainersVersion', "1.17.5")
	jjwtVersion = '0.11.5'
	junitBomVersion = '5.9.0'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

sourceSets {
	integrationTest {
//		java.srcDir("src/integrationTest/java")
//		resources.srcDir("src/integrationTest/resources")
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation, testImplementation
	integrationTestCompileOnly.extendsFrom compileOnly
	integrationTestAnnotationProcessor.extendsFrom annotationProcessor
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.4'
	implementation "org.springdoc:springdoc-openapi-ui:1.6.11"
	implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation(platform("org.junit:junit-bom:$junitBomVersion"))
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.testcontainers:testcontainers"
	testImplementation "org.testcontainers:junit-jupiter"
	testImplementation "org.testcontainers:postgresql"

	integrationTestImplementation 'org.springframework.security:spring-security-test'
}


task integrationTest(type: Test) {
	description = 'Running the integration tests'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	testLogging {
		exceptionFormat = 'full'
	}
}

//check.dependsOn integrationTest

test {
	useJUnitPlatform()
}

integrationTest {
	useJUnitPlatform()
}

clean.doFirst {
	delete "${rootDir}\\out"
	println "delete ${rootDir}\\out"
}

checkstyle {
	showViolations = true
	toolVersion '10.3.4'
	maxWarnings = 0
	maxErrors = 0
	configFile file("config/checkstyle/google_checks.xml")
}

jacoco {
	toolVersion = '0.8.8'
	reportsDirectory = layout.buildDirectory.dir('jacocoReports')
}

jacocoTestReport {
	group = 'Reporting'
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoReports')
	}
}

springBoot {
	buildInfo()
}
